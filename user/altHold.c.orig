/*********************************************************
 @本程序只供学习使用，未经作者许可，不得用于其它任何用途
 +编者：普哥
 +描述：高度控制
 +编写日期：2017/3/10
 +版权所有，盗版必纠。
**********************************************************/
#include "altHold.h"

#include "rc.h"
#include "filter.h"
#include "imuAPI.h"
#include "flightmode.h"
#include "control.h"
#include "PID.h"

#define ALT_HOLD_THROTTLE_NEUTRAL_ZONE 5
uint16_t initialThrottleHold = 0;

uint16_t AltHoldDesire = 0;
uint16_t altTHR = 0;
uint16_t acc_offset = 0;

void aaa()
{
if (FlightMode == AltHold) 
    { 
 
     static uint8_t isAltHoldChanged = 0;
 
     static int16_t AltHoldCorr = 0;
 
     if (myabs(CHdata[THR]-initialThrottleHold)>ALT_HOLD_THROTTLE_NEUTRAL_ZONE) 
         {
 
 
       AltHoldCorr+= CHdata[THR] - initialThrottleHold;
 
       if(myabs(AltHoldCorr) > 512) {
 
         AltHoldDesire += AltHoldCorr/512; 
 
         AltHoldCorr %= 512;
 
       }
 
       isAltHoldChanged = 1;
 
     } 
         else if (isAltHoldChanged) {
 
       AltHoldDesire = alt.EstAlt; 
 
       isAltHoldChanged = 0;
 
     }
 
     altTHR = initialThrottleHold + BaroPID;
 
   }
}
void bbb()
{
	 float rate;	
   	 int16_t acc_error;

    static float last_acc_error;	 
		add.PreHeight=MovMiddle(add.PreHeight);
       
	{ //获取垂直速度数据

		static uint8_t cnt=0;	
		const uint8_t RATE_AVR_NUM = 25; //将得到的加速度数据做25组滑动均值滤波
		static 	int16_t average[RATE_AVR_NUM];
		
		uint8_t i;
		int32_t sum=0;
		int16_t max=-32767;
		int16_t min=32767;
		
			acc_error = getNormAccZ(quad,acc) - GravityAcc;	
			
			average[cnt] = acc_error;
			
			cnt++;
				
			if(cnt>=RATE_AVR_NUM)
			{
				cnt=0;
			}
			
			for(i=0;i<RATE_AVR_NUM;i++)
			{
					sum += average[i];
					if(average[i]>max)
							max = average[i];
					if(average[i]<min)
							min = average[i];			
			}
			acc_error = (sum-max-min)/(RATE_AVR_NUM-2);	
		

			
			if(acc_error>300||acc_error<-300)	//加速度太小，判定为抖动
			{		
					rate += acc_error * dt;	//累加速度值
			}	
			
			{//此处做一个速度与高度的互补滤波
				const float factor =1.5f;//0.015f/0.003f;
				static float last_high;

				pidHeightRate.measured = rate + (gaodu - last_high)* factor ; //
				last_high =  gaodu;
			}
			pidHeightHigh.measured = gaodu;	
			
		}
	//----------------------------------------------紧急终止飞行
	if(ALL_flag.unlock == EMERGENT) //意外情况，请使用遥控紧急上锁，飞控就可以在任何情况下紧急中止飞行，锁定飞行器，退出PID控制
		status = EXIT_255;
	//----------------------------------------------控制
	switch(status)
	{
		case WAITING_1: //检测定高
		  if(ALL_flag.height_lock && ALL_flag.unlock) 
			{
				LED.status = WARNING;
				status = WAITING_2;
			}
			break;
		case WAITING_2: //定高前准备
			pidRest(&pPidObject[6],2);  //复位上次遗留下来的定高PID数据
		
			pidHeightHigh.desired = pidHeightHigh.measured;//记录高度
			{
				rate = 0; //清除内环速度偏移量
				last_acc_error = 0;
			}
			status = PROCESS_31;
			break;
		
		case PROCESS_31://进入定高	
			
			CascadePID(&pidHeightRate,&pidHeightHigh,dt);	 //调用串级PID
			
			if(!ALL_flag.height_lock)  //退出定高
			{
				LED.status = AlwaysOn ;
				status = EXIT_255;
			}
			break;
		case EXIT_255: //退出定高
			pidRest(&pPidObject[6],2);	
			status = WAITING_1;
			break;
		default:
			status = WAITING_1;
			break;	
	}	
		
}


